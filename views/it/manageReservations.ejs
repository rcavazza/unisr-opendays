<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestione Opzioni di Prenotazione</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            margin-bottom: 30px;
        }
        .section {
            margin-bottom: 30px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .section h2 {
            margin-top: 0;
            color: #444;
        }
        .input-group {
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }
        input[type="text"], input[type="number"], select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 10px;
        }
        button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }
        button:hover {
            background-color: #0056b3;
        }
        button.remove {
            background-color: #dc3545;
        }
        button.remove:hover {
            background-color: #c82333;
        }
        .limits-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        .limit-item {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .save-button {
            margin-top: 20px;
            padding: 12px 24px;
            font-size: 16px;
            background-color: #28a745;
        }
        .save-button:hover {
            background-color: #218838;
        }
        .error {
            color: #dc3545;
            margin-top: 10px;
        }
        .success {
            color: #28a745;
            margin-top: 10px;
        }
        .field-values {
            margin-top: 15px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
        .field-value {
            display: inline-block;
            margin: 5px;
            padding: 5px 10px;
            background-color: #e9ecef;
            border-radius: 4px;
        }
        .field-value button {
            padding: 2px 6px;
            margin-left: 5px;
            font-size: 12px;
        }
        .language-switcher {
            position: absolute;
            top: 20px;
            right: 20px;
        }
        .language-switcher a {
            display: inline-block;
            margin-left: 10px;
            text-decoration: none;
        }
        .language-switcher img {
            width: 24px;
            height: 24px;
            border-radius: 50%;
        }
    </style>
</head>
<body>
    <div class="language-switcher">
        <a href="/manage-reservations?lang=en"><img src="/images/en.png" alt="English"></a>
    </div>

    <div class="container">
        <h1>Gestione Opzioni di Prenotazione</h1>
        
        <div class="section">
            <h2>Campi</h2>
            <div id="fields-container">
                <!-- I campi esistenti verranno visualizzati qui -->
            </div>
            
            <div class="input-group" style="margin-top: 20px;">
                <input type="text" id="field-id" placeholder="ID Campo (es. day, location)">
                <input type="text" id="field-name" placeholder="Nome Campo (es. Giorno, Location)">
                <select id="field-type">
                    <option value="text">Testo</option>
                    <option value="date">Data</option>
                    <option value="time">Ora</option>
                    <option value="number">Numero</option>
                </select>
                <button onclick="addField()">Aggiungi Campo</button>
            </div>
        </div>

        <div class="section">
            <h2>Limiti</h2>
            <div id="limits-container" class="limits-grid"></div>
        </div>

        <button class="save-button" onclick="saveAll()">Salva Tutte le Modifiche</button>
        <div id="message"></div>
    </div>

    <script>
        let currentData = JSON.parse('<%- JSON.stringify(data) %>');
        
        // Migrazione dal vecchio formato se necessario
        if (!currentData.fields) {
            currentData.fields = [];
            
            // Aggiungi il campo giorno se esiste nel vecchio formato
            if (Array.isArray(currentData.days)) {
                currentData.fields.push({
                    id: 'day',
                    name: 'Giorno',
                    type: 'date',
                    values: currentData.days
                });
                delete currentData.days;
            }
            
            // Aggiungi il campo location se esiste nel vecchio formato
            if (Array.isArray(currentData.locations)) {
                currentData.fields.push({
                    id: 'location',
                    name: 'Location',
                    type: 'text',
                    values: currentData.locations
                });
                delete currentData.locations;
            }
        }

        function showMessage(message, isError = false) {
            const messageDiv = document.getElementById('message');
            messageDiv.textContent = message;
            messageDiv.className = isError ? 'error' : 'success';
            setTimeout(() => {
                messageDiv.textContent = '';
                messageDiv.className = '';
            }, 3000);
        }

        function addField() {
            const fieldId = document.getElementById('field-id').value.trim();
            const fieldName = document.getElementById('field-name').value.trim();
            const fieldType = document.getElementById('field-type').value;
            
            if (!fieldId || !fieldName) {
                showMessage('ID Campo e Nome sono obbligatori', true);
                return;
            }
            
            // Controlla se l'ID del campo esiste già
            if (currentData.fields.some(f => f.id === fieldId)) {
                showMessage('ID Campo già esistente', true);
                return;
            }
            
            // Aggiungi nuovo campo
            currentData.fields.push({
                id: fieldId,
                name: fieldName,
                type: fieldType,
                values: []
            });
            
            // Pulisci gli input
            document.getElementById('field-id').value = '';
            document.getElementById('field-name').value = '';
            
            // Aggiorna l'interfaccia
            renderFields();
        }

        function renderFields() {
            const container = document.getElementById('fields-container');
            container.innerHTML = '';
            
            currentData.fields.forEach(field => {
                const fieldDiv = document.createElement('div');
                fieldDiv.className = 'field-section';
                fieldDiv.id = `field-section-${field.id}`;
                
                const header = document.createElement('h3');
                header.textContent = `${field.name} (${field.id})`;
                
                const typeSpan = document.createElement('span');
                typeSpan.textContent = ` - Tipo: ${field.type}`;
                typeSpan.style.fontSize = '0.8em';
                typeSpan.style.color = '#666';
                header.appendChild(typeSpan);
                
                const removeButton = document.createElement('button');
                removeButton.className = 'remove';
                removeButton.textContent = 'Rimuovi Campo';
                removeButton.style.marginLeft = '10px';
                removeButton.onclick = function() {
                    removeField(field.id);
                };
                header.appendChild(removeButton);
                
                fieldDiv.appendChild(header);
                
                // Aggiungi input per nuovi valori
                const inputGroup = document.createElement('div');
                inputGroup.className = 'input-group';
                
                const input = document.createElement('input');
                input.type = 'text';
                input.placeholder = `Aggiungi valore per ${field.name}`;
                
                const addButton = document.createElement('button');
                addButton.textContent = 'Aggiungi';
                addButton.onclick = function() {
                    addValueToField(field.id, input.value.trim());
                    input.value = '';
                };
                
                inputGroup.appendChild(input);
                inputGroup.appendChild(addButton);
                fieldDiv.appendChild(inputGroup);
                
                // Visualizza i valori esistenti
                const valuesDiv = document.createElement('div');
                valuesDiv.className = 'field-values';
                valuesDiv.id = `field-values-${field.id}`;
                
                field.values.forEach(value => {
                    const valueSpan = document.createElement('div');
                    valueSpan.className = 'field-value';
                    valueSpan.textContent = value;
                    
                    const removeValueButton = document.createElement('button');
                    removeValueButton.className = 'remove';
                    removeValueButton.textContent = 'x';
                    removeValueButton.onclick = function() {
                        removeValueFromField(field.id, value);
                    };
                    
                    valueSpan.appendChild(removeValueButton);
                    valuesDiv.appendChild(valueSpan);
                });
                
                fieldDiv.appendChild(valuesDiv);
                container.appendChild(fieldDiv);
            });
            
            updateLimits();
        }

        function removeField(fieldId) {
            // Rimuovi il campo dai dati
            currentData.fields = currentData.fields.filter(f => f.id !== fieldId);
            
            // Aggiorna i limiti (rimuovi qualsiasi limite che include questo campo)
            const newLimits = {};
            Object.entries(currentData.limits).forEach(([key, value]) => {
                const parts = key.split('_');
                const fieldValues = {};
                
                let includesRemovedField = false;
                currentData.fields.forEach((field, index) => {
                    if (index < parts.length) {
                        fieldValues[field.id] = parts[index];
                    } else {
                        includesRemovedField = true;
                    }
                });
                
                if (!includesRemovedField) {
                    const newKey = Object.values(fieldValues).join('_');
                    newLimits[newKey] = value;
                }
            });
            
            currentData.limits = newLimits;
            
            // Aggiorna l'interfaccia
            renderFields();
        }

        function addValueToField(fieldId, value) {
            if (!value) {
                showMessage('Il valore non può essere vuoto', true);
                return;
            }
            
            const field = currentData.fields.find(f => f.id === fieldId);
            if (!field) return;
            
            if (field.values.includes(value)) {
                showMessage(`Valore già esistente in ${field.name}`, true);
                return;
            }
            
            field.values.push(value);
            renderFieldValues(fieldId);
            updateLimits();
        }

        function removeValueFromField(fieldId, value) {
            const field = currentData.fields.find(f => f.id === fieldId);
            if (!field) return;
            
            field.values = field.values.filter(v => v !== value);
            renderFieldValues(fieldId);
            updateLimits();
        }

        function renderFieldValues(fieldId) {
            const field = currentData.fields.find(f => f.id === fieldId);
            if (!field) return;
            
            const valuesDiv = document.getElementById(`field-values-${fieldId}`);
            valuesDiv.innerHTML = '';
            
            field.values.forEach(value => {
                const valueSpan = document.createElement('div');
                valueSpan.className = 'field-value';
                valueSpan.textContent = value;
                
                const removeValueButton = document.createElement('button');
                removeValueButton.className = 'remove';
                removeValueButton.textContent = 'x';
                removeValueButton.onclick = function() {
                    removeValueFromField(fieldId, value);
                };
                
                valueSpan.appendChild(removeValueButton);
                valuesDiv.appendChild(valueSpan);
            });
        }

        function generateCombinations() {
            const combinations = [];
            
            function combine(fields, current = [], index = 0) {
                if (index === fields.length) {
                    combinations.push([...current]);
                    return;
                }
                
                const field = fields[index];
                for (const value of field.values) {
                    current.push(value);
                    combine(fields, current, index + 1);
                    current.pop();
                }
            }
            
            combine(currentData.fields);
            return combinations;
        }

        function updateLimits() {
            const container = document.getElementById('limits-container');
            container.innerHTML = '';
            
            const combinations = generateCombinations();
            
            combinations.forEach(combination => {
                const key = combination.join('_');
                const div = document.createElement('div');
                div.className = 'limit-item';
                
                const label = document.createElement('span');
                label.innerHTML = currentData.fields.map((field, index) => 
                    `<strong>${field.name}:</strong> ${combination[index]}`
                ).join(' | ');
                
                const input = document.createElement('input');
                input.type = 'number';
                input.min = '0';
                input.value = currentData.limits[key] || 0;
                input.onchange = function() {
                    currentData.limits[key] = parseInt(this.value) || 0;
                };
                
                div.appendChild(label);
                div.appendChild(input);
                container.appendChild(div);
            });
        }

        function saveAll() {
            fetch('/api/reservation-options', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ...currentData,
                    lang: 'it'  // Aggiungi il parametro della lingua
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Risposta di rete non valida');
                }
                // Mostra un messaggio di successo senza reindirizzare
                showMessage('Modifiche salvate con successo');
                return;
            })
            .catch(error => {
                showMessage('Errore nel salvare le modifiche: ' + error.message, true);
            });
        }

        // Inizializza l'interfaccia
        window.onload = function() {
            renderFields();
        };
    </script>
</body>
</html>