<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manage Experiences - Simple CRUD</title>
  <style>
    /* Modern CSS for the simplified admin panel */
    :root {
      --primary-color: #4CAF50;
      --secondary-color: #2196F3;
      --danger-color: #f44336;
      --light-gray: #f9f9f9;
      --border-color: #ddd;
      --text-color: #333;
      --success-color: #4CAF50;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 20px;
      color: var(--text-color);
      background-color: #f5f5f5;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    
    h1 {
      color: var(--primary-color);
      margin-top: 0;
      padding-bottom: 10px;
      border-bottom: 2px solid var(--light-gray);
    }
    
    .top-controls {
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
      align-items: center;
    }
    
    .btn {
      padding: 8px 16px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
      transition: background-color 0.2s, transform 0.1s;
    }
    
    .btn:hover {
      opacity: 0.9;
      transform: translateY(-1px);
    }
    
    .btn:active {
      transform: translateY(0);
    }
    
    .btn-primary {
      background-color: var(--primary-color);
      color: white;
    }
    
    .btn-secondary {
      background-color: var(--secondary-color);
      color: white;
    }
    
    .btn-danger {
      background-color: var(--danger-color);
      color: white;
    }
    
    .btn-success {
      background-color: var(--success-color);
      color: white;
    }
    
    .table-container {
      overflow-x: auto;
      margin-bottom: 20px;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
      table-layout: fixed;
    }
    
    th, td {
      border: 1px solid var(--border-color);
      padding: 10px;
      text-align: left;
      position: relative;
      max-width: 150px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    /* Special handling for description column */
    td:nth-child(8) {
      max-width: 300px;
    }
    
    /* Show full content on hover */
    td:hover {
      white-space: normal;
      overflow: visible;
      z-index: 1;
      background-color: white;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    
    /* Make sure the last column (actions) is always visible */
    td:last-child {
      position: sticky;
      right: 0;
      background-color: white;
      z-index: 30;
      width: 200px;
      min-width: 200px;
      max-width: 200px;
      border-left: 2px solid var(--border-color);
    }
    
    th {
      background-color: var(--light-gray);
      font-weight: 600;
      position: sticky;
      top: 0;
      z-index: 10;
    }
    
    tr:nth-child(even) {
      background-color: var(--light-gray);
    }
    
    tr:hover {
      background-color: rgba(33, 150, 243, 0.05);
    }
    
    .editable {
      cursor: pointer;
      transition: background-color 0.2s;
      min-height: 20px;
      width: 100%;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .editable:hover {
      background-color: rgba(33, 150, 243, 0.1);
    }
    
    .editable:focus {
      outline: 2px solid var(--secondary-color);
      background-color: white;
    }
    
    .editing {
      background-color: rgba(33, 150, 243, 0.1);
      white-space: normal;
      overflow: visible;
      min-height: 40px;
    }
    
    .action-buttons {
      display: flex;
      gap: 5px;
      justify-content: center;
    }
    
    .row-actions {
      display: flex;
      gap: 5px;
      justify-content: center;
      position: relative;
      z-index: 30;
      background-color: white;
      width: 100%;
      flex-wrap: wrap;
    }
    
    /* Style for buttons in row actions */
    .row-actions .btn {
      margin: 2px;
      flex: 1;
      min-width: 60px;
      white-space: nowrap;
    }
    
    .hidden {
      display: none !important;
    }
    
    /* Ensure buttons are visible */
    .btn-secondary, .btn-success, .btn-danger {
      position: relative;
      z-index: 25;
    }
    
    .save-indicator {
      position: absolute;
      top: 5px;
      right: 5px;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background-color: var(--success-color);
      opacity: 0;
      transition: opacity 0.3s;
    }
    
    .save-indicator.visible {
      opacity: 1;
    }
    
    .add-form-container {
      margin-top: 20px;
      padding: 15px;
      border: 1px solid var(--border-color);
      border-radius: 5px;
      background-color: var(--light-gray);
    }
    
    .form-row {
      display: flex;
      flex-wrap: wrap;
      margin-bottom: 10px;
      gap: 10px;
    }
    
    .form-group {
      flex: 1;
      min-width: 200px;
    }
    
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
    }
    
    input, textarea, select {
      width: 100%;
      padding: 8px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      font-family: inherit;
      font-size: inherit;
    }
    
    textarea {
      resize: vertical;
      min-height: 80px;
    }
    
    .notification {
      padding: 10px 15px;
      margin-bottom: 15px;
      border-radius: 4px;
      display: none;
    }
    
    .notification.success {
      background-color: rgba(76, 175, 80, 0.1);
      border: 1px solid rgba(76, 175, 80, 0.5);
      color: var(--success-color);
    }
    
    .notification.error {
      background-color: rgba(244, 67, 54, 0.1);
      border: 1px solid rgba(244, 67, 54, 0.5);
      color: var(--danger-color);
    }
    
    .notification.visible {
      display: block;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .container {
        padding: 10px;
      }
      
      th, td {
        padding: 8px 5px;
        font-size: 14px;
      }
      
      .btn {
        padding: 6px 10px;
        font-size: 14px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Manage Experiences - Simple CRUD</h1>
    
    <div class="notification" id="notification"></div>
    
    <div class="top-controls">
      <button id="add-new-btn" class="btn btn-primary">Add New Experience</button>
      <a href="/admin/experiences" class="btn btn-secondary">Switch to Standard View</a>
    </div>
    
    <div class="table-container">
      <table id="experiences-table">
        <thead>
          <tr>
            <% displayFields.forEach(field => { %>
              <th data-field="<%= field %>"><%= field %></th>
            <% }); %>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% experiences.forEach(experience => { %>
            <tr data-id="<%= experience.id %>" data-state="view">
              <% displayFields.forEach(field => { %>
                <td>
                  <div class="editable" 
                       data-field="<%= field %>" 
                       data-original="<%= experience[field] || '' %>"
                       contenteditable="false">
                    <%= experience[field] || '' %>
                  </div>
                  <div class="save-indicator"></div>
                </td>
              <% }); %>
              <td class="row-actions">
                <button class="btn btn-secondary edit-row-btn">Edit</button>
                <button class="btn btn-success save-row-btn hidden">Save</button>
                <button class="btn btn-secondary cancel-row-btn hidden">Cancel</button>
                <button class="btn btn-danger delete-row-btn">Delete</button>
              </td>
            </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
    
    <div id="add-form-container" class="add-form-container hidden">
      <h2>Add New Experience</h2>
      <form id="add-experience-form">
        <% 
        // Group fields into rows
        const fieldGroups = [
          ['experience_id', 'title'],
          ['course', 'location'],
          ['date', 'duration'],
          ['language', 'course_type'],
          ['max_participants', 'current_participants'],
          ['ora_inizio', 'ora_fine'],
          ['desc']
        ];
        %>
        
        <% fieldGroups.forEach(group => { %>
          <div class="form-row">
            <% group.forEach(field => { %>
              <div class="form-group">
                <label for="<%= field %>"><%= field %>:</label>
                <% if (field === 'desc') { %>
                  <textarea id="<%= field %>" name="<%= field %>" rows="4"></textarea>
                <% } else if (field === 'date') { %>
                  <input type="date" id="<%= field %>" name="<%= field %>">
                <% } else if (field === 'ora_inizio' || field === 'ora_fine') { %>
                  <input type="time" id="<%= field %>" name="<%= field %>">
                <% } else if (field === 'max_participants' || field === 'current_participants' || field === 'duration') { %>
                  <input type="number" id="<%= field %>" name="<%= field %>" value="<%= field === 'current_participants' ? 0 : '' %>">
                <% } else if (field === 'language') { %>
                  <select id="<%= field %>" name="<%= field %>">
                    <option value="it">Italian</option>
                    <option value="en">English</option>
                  </select>
                <% } else { %>
                  <input type="text" id="<%= field %>" name="<%= field %>">
                <% } %>
              </div>
            <% }); %>
          </div>
        <% }); %>
        
        <div class="form-row">
          <button type="submit" class="btn btn-primary">Save</button>
          <button type="button" id="cancel-add-btn" class="btn btn-secondary">Cancel</button>
        </div>
      </form>
    </div>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // DOM elements
      const table = document.getElementById('experiences-table');
      const tbody = table.querySelector('tbody');
      const addNewBtn = document.getElementById('add-new-btn');
      const addFormContainer = document.getElementById('add-form-container');
      const addForm = document.getElementById('add-experience-form');
      const cancelAddBtn = document.getElementById('cancel-add-btn');
      const notification = document.getElementById('notification');
      
      // Show notification
      function showNotification(message, type) {
        notification.textContent = message;
        notification.className = `notification ${type} visible`;
        
        // Hide after 3 seconds
        setTimeout(() => {
          notification.className = 'notification';
        }, 3000);
      }
      
      // Add event listeners
      addNewBtn.addEventListener('click', showAddForm);
      cancelAddBtn.addEventListener('click', hideAddForm);
      addForm.addEventListener('submit', addExperience);
      
      // Add event delegation for row actions
      tbody.addEventListener('click', function(e) {
        const target = e.target;
        const row = target.closest('tr');
        
        if (!row) return;
        
        const id = row.dataset.id;
        
        if (target.classList.contains('edit-row-btn')) {
          enableRowEditing(row);
        } else if (target.classList.contains('save-row-btn')) {
          saveRow(row);
        } else if (target.classList.contains('cancel-row-btn')) {
          cancelRowEditing(row);
        } else if (target.classList.contains('delete-row-btn')) {
          deleteExperience(id, row);
        }
      });
      
      // Function to show the add form
      function showAddForm() {
        addForm.reset();
        addFormContainer.classList.remove('hidden');
        addNewBtn.classList.add('hidden');
      }
      
      // Function to hide the add form
      function hideAddForm() {
        addFormContainer.classList.add('hidden');
        addNewBtn.classList.remove('hidden');
      }
      
      // Function to enable editing for a row
      function enableRowEditing(row) {
        // Set row state to editing
        row.dataset.state = 'editing';
        
        // Show save and cancel buttons, hide edit button
        const editBtn = row.querySelector('.edit-row-btn');
        const saveBtn = row.querySelector('.save-row-btn');
        const cancelBtn = row.querySelector('.cancel-row-btn');
        
        editBtn.classList.add('hidden');
        saveBtn.classList.remove('hidden');
        cancelBtn.classList.remove('hidden');
        
        // Make all editable fields in the row editable
        const editableFields = row.querySelectorAll('.editable');
        editableFields.forEach(field => {
          field.contentEditable = 'true';
          field.classList.add('editing');
          
          // Store original value for cancellation
          field.dataset.original = field.textContent.trim();
        });
      }
      
      // Function to cancel editing for a row
      function cancelRowEditing(row) {
        // Set row state back to view
        row.dataset.state = 'view';
        
        // Show edit button, hide save and cancel buttons
        const editBtn = row.querySelector('.edit-row-btn');
        const saveBtn = row.querySelector('.save-row-btn');
        const cancelBtn = row.querySelector('.cancel-row-btn');
        
        editBtn.classList.remove('hidden');
        saveBtn.classList.add('hidden');
        cancelBtn.classList.add('hidden');
        
        // Restore original values and disable editing
        const editableFields = row.querySelectorAll('.editable');
        editableFields.forEach(field => {
          field.textContent = field.dataset.original;
          field.contentEditable = 'false';
          field.classList.remove('editing');
        });
      }
      
      // Function to save a row
      async function saveRow(row) {
        const id = row.dataset.id;
        const experienceData = {};
        
        // Collect data from editable fields
        const editableFields = row.querySelectorAll('.editable');
        editableFields.forEach(field => {
          const fieldName = field.dataset.field;
          const fieldValue = field.textContent.trim();
          experienceData[fieldName] = fieldValue;
        });
        
        try {
          const response = await fetch(`/api/experiences/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(experienceData)
          });
          
          const result = await response.json();
          
          if (response.ok) {
            // Update was successful
            showNotification('Experience updated successfully', 'success');
            
            // Update the original values
            editableFields.forEach(field => {
              field.dataset.original = field.textContent.trim();
              
              // Show save indicator
              const indicator = field.nextElementSibling;
              indicator.classList.add('visible');
              setTimeout(() => {
                indicator.classList.remove('visible');
              }, 1000);
            });
            
            // Set row state back to view
            row.dataset.state = 'view';
            
            // Show edit button, hide save and cancel buttons
            const editBtn = row.querySelector('.edit-row-btn');
            const saveBtn = row.querySelector('.save-row-btn');
            const cancelBtn = row.querySelector('.cancel-row-btn');
            
            editBtn.classList.remove('hidden');
            saveBtn.classList.add('hidden');
            cancelBtn.classList.add('hidden');
            
            // Disable editing
            editableFields.forEach(field => {
              field.contentEditable = 'false';
              field.classList.remove('editing');
            });
          } else {
            // Update failed
            showNotification(`Error: ${result.error || 'Unknown error'}`, 'error');
          }
        } catch (error) {
          console.error('Error saving experience:', error);
          showNotification('Error saving experience. See console for details.', 'error');
        }
      }
      
      // Function to add a new experience
      async function addExperience(e) {
        e.preventDefault();
        
        // Collect form data
        const formData = new FormData(addForm);
        const experienceData = {};
        formData.forEach((value, key) => {
          experienceData[key] = value;
        });
        
        try {
          const response = await fetch('/api/experiences', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(experienceData)
          });
          
          const result = await response.json();
          
          if (response.ok) {
            // Creation was successful
            showNotification('Experience created successfully', 'success');
            
            // Reload the page to show the new experience
            window.location.reload();
          } else {
            // Creation failed
            showNotification(`Error: ${result.error || 'Unknown error'}`, 'error');
          }
        } catch (error) {
          console.error('Error creating experience:', error);
          showNotification('Error creating experience. See console for details.', 'error');
        }
      }
      
      // Function to delete an experience
      async function deleteExperience(id, row) {
        if (confirm('Are you sure you want to delete this experience?')) {
          try {
            const response = await fetch(`/api/experiences/${id}`, {
              method: 'DELETE'
            });
            
            const result = await response.json();
            
            if (response.ok) {
              // Deletion was successful
              showNotification('Experience deleted successfully', 'success');
              
              // Remove the row from the table
              row.remove();
            } else {
              // Deletion failed
              showNotification(`Error: ${result.error || 'Unknown error'}`, 'error');
            }
          } catch (error) {
            console.error('Error deleting experience:', error);
            showNotification('Error deleting experience. See console for details.', 'error');
          }
        }
      }
    });
  </script>
</body>
</html>