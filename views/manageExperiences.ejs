<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manage Experiences</title>
  <style>
    /* Simple CSS for the admin panel */
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
      cursor: pointer;
    }
    tr:nth-child(even) {
      background-color: #f9f9f9;
    }
    .action-buttons {
      display: flex;
      gap: 5px;
    }
    .form-container {
      max-width: 800px;
      margin-bottom: 20px;
      padding: 15px;
      border: 1px solid #ddd;
      border-radius: 5px;
      background-color: #f9f9f9;
    }
    .form-row {
      display: flex;
      flex-wrap: wrap;
      margin-bottom: 10px;
    }
    .form-group {
      flex: 1;
      min-width: 200px;
      margin-right: 10px;
      margin-bottom: 10px;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    input, textarea, select {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    button.edit {
      background-color: #2196F3;
    }
    button.delete {
      background-color: #f44336;
    }
    .filter-container {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
      align-items: center;
    }
    .hidden {
      display: none;
    }
  </style>
</head>
<body>
  <h1>Manage Experiences</h1>
  
  <div class="filter-container">
    <div class="form-group">
      <label for="language-filter">Filter by Language:</label>
      <select id="language-filter">
        <option value="">All Languages</option>
        <option value="it">Italian</option>
        <option value="en">English</option>
      </select>
    </div>
    <button id="add-new-btn">Add New Experience</button>
  </div>
  
  <div id="form-container" class="form-container hidden">
    <h2 id="form-title">Add New Experience</h2>
    <form id="experience-form">
      <input type="hidden" id="experience-id">
      
      <div class="form-row">
        <div class="form-group">
          <label for="experience_id">Experience ID:</label>
          <input type="text" id="experience_id" name="experience_id" required>
        </div>
        <div class="form-group">
          <label for="title">Title:</label>
          <input type="text" id="title" name="title" required>
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="course">Course:</label>
          <input type="text" id="course" name="course" required>
        </div>
        <div class="form-group">
          <label for="location">Location:</label>
          <input type="text" id="location" name="location" required>
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="date">Date:</label>
          <input type="date" id="date" name="date" required>
        </div>
        <div class="form-group">
          <label for="duration">Duration (minutes):</label>
          <input type="number" id="duration" name="duration" required>
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="language">Language:</label>
          <select id="language" name="language" required>
            <option value="it">Italian</option>
            <option value="en">English</option>
          </select>
        </div>
        <div class="form-group">
          <label for="course_type">Course Type:</label>
          <input type="text" id="course_type" name="course_type" required>
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="max_participants">Max Participants:</label>
          <input type="number" id="max_participants" name="max_participants" required>
        </div>
        <div class="form-group">
          <label for="current_participants">Current Participants:</label>
          <input type="number" id="current_participants" name="current_participants" value="0" required>
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="ora_inizio">Start Time:</label>
          <input type="time" id="ora_inizio" name="ora_inizio" required>
        </div>
        <div class="form-group">
          <label for="ora_fine">End Time:</label>
          <input type="time" id="ora_fine" name="ora_fine" required>
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group" style="width: 100%;">
          <label for="desc">Description:</label>
          <textarea id="desc" name="desc" rows="4" required></textarea>
        </div>
      </div>
      
      <div class="form-row">
        <button type="submit" id="save-btn">Save</button>
        <button type="button" id="cancel-btn" style="margin-left: 10px; background-color: #ccc;">Cancel</button>
      </div>
    </form>
  </div>
  
  <table id="experiences-table">
    <thead>
      <tr>
        <th data-sort="id">ID</th>
        <th data-sort="experience_id">Experience ID</th>
        <th data-sort="title">Title</th>
        <th data-sort="course">Course</th>
        <th data-sort="course_type">Course Type</th>
        <th data-sort="location">Location</th>
        <th data-sort="date">Date</th>
        <th data-sort="duration">Duration</th>
        <th data-sort="ora_inizio">Start Time</th>
        <th data-sort="ora_fine">End Time</th>
        <th data-sort="language">Language</th>
        <th data-sort="max_participants">Max Participants</th>
        <th data-sort="current_participants">Current Participants</th>
        <th data-sort="desc">Description</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <% experiences.forEach(experience => { %>
        <tr data-id="<%= experience.id %>">
          <td><%= experience.id %></td>
          <td><%= experience.experience_id %></td>
          <td><%= experience.title %></td>
          <td><%= experience.course %></td>
          <td><%= experience.course_type %></td>
          <td><%= experience.location %></td>
          <td><%= experience.date %></td>
          <td><%= experience.duration %></td>
          <td><%= experience.ora_inizio %></td>
          <td><%= experience.ora_fine %></td>
          <td><%= experience.language %></td>
          <td><%= experience.max_participants %></td>
          <td><%= experience.current_participants %></td>
          <td><%= experience.desc %></td>
          <td class="action-buttons">
            <button class="edit" data-id="<%= experience.id %>">Edit</button>
            <button class="delete" data-id="<%= experience.id %>">Delete</button>
          </td>
        </tr>
      <% }); %>
    </tbody>
  </table>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // DOM elements
      const table = document.getElementById('experiences-table');
      const tbody = table.querySelector('tbody');
      const form = document.getElementById('experience-form');
      const formContainer = document.getElementById('form-container');
      const formTitle = document.getElementById('form-title');
      const addNewBtn = document.getElementById('add-new-btn');
      const cancelBtn = document.getElementById('cancel-btn');
      const experienceIdInput = document.getElementById('experience-id');
      const languageFilter = document.getElementById('language-filter');
      
      // Current sort state
      let currentSort = { column: 'id', direction: 'asc' };
      
      // Add event listeners
      addNewBtn.addEventListener('click', showAddForm);
      cancelBtn.addEventListener('click', hideForm);
      form.addEventListener('submit', saveExperience);
      table.querySelectorAll('th[data-sort]').forEach(th => {
        th.addEventListener('click', () => sortTable(th.dataset.sort));
      });
      languageFilter.addEventListener('change', filterByLanguage);
      
      // Add event delegation for edit and delete buttons
      tbody.addEventListener('click', function(e) {
        if (e.target.classList.contains('edit')) {
          editExperience(e.target.dataset.id);
        } else if (e.target.classList.contains('delete')) {
          deleteExperience(e.target.dataset.id);
        }
      });
      
      // Function to show the add form
      function showAddForm() {
        formTitle.textContent = 'Add New Experience';
        form.reset();
        experienceIdInput.value = '';
        formContainer.classList.remove('hidden');
      }
      
      // Function to hide the form
      function hideForm() {
        formContainer.classList.add('hidden');
      }
      
      // Function to save an experience (create or update)
      async function saveExperience(e) {
        e.preventDefault();
        
        // Collect form data
        const formData = new FormData(form);
        const experienceData = {};
        formData.forEach((value, key) => {
          experienceData[key] = value;
        });
        
        try {
          let response;
          const id = experienceIdInput.value;
          
          if (id) {
            // Update existing experience
            response = await fetch(`/api/experiences/${id}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(experienceData)
            });
          } else {
            // Create new experience
            response = await fetch('/api/experiences', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(experienceData)
            });
          }
          
          const result = await response.json();
          
          if (response.ok) {
            // Refresh the table
            loadExperiences();
            hideForm();
          } else {
            alert(`Error: ${result.error || 'Unknown error'}`);
          }
        } catch (error) {
          console.error('Error saving experience:', error);
          alert('Error saving experience. See console for details.');
        }
      }
      
      // Function to edit an experience
      async function editExperience(id) {
        try {
          const response = await fetch(`/api/experiences/${id}`);
          const experience = await response.json();
          
          if (response.ok) {
            formTitle.textContent = 'Edit Experience';
            experienceIdInput.value = experience.id;
            
            // Fill the form with experience data
            Object.keys(experience).forEach(key => {
              const input = document.getElementById(key);
              if (input) {
                input.value = experience[key];
              }
            });
            
            formContainer.classList.remove('hidden');
          } else {
            alert(`Error: ${experience.error || 'Unknown error'}`);
          }
        } catch (error) {
          console.error('Error loading experience for edit:', error);
          alert('Error loading experience. See console for details.');
        }
      }
      
      // Function to delete an experience
      async function deleteExperience(id) {
        if (confirm('Are you sure you want to delete this experience?')) {
          try {
            const response = await fetch(`/api/experiences/${id}`, {
              method: 'DELETE'
            });
            
            const result = await response.json();
            
            if (response.ok) {
              // Remove the row from the table
              const row = tbody.querySelector(`tr[data-id="${id}"]`);
              if (row) {
                row.remove();
              }
            } else {
              alert(`Error: ${result.error || 'Unknown error'}`);
            }
          } catch (error) {
            console.error('Error deleting experience:', error);
            alert('Error deleting experience. See console for details.');
          }
        }
      }
      
      // Function to load experiences with optional filtering
      async function loadExperiences() {
        try {
          const language = languageFilter.value;
          let url = '/api/experiences';
          
          if (language) {
            url += `?language=${language}`;
          }
          
          if (currentSort.column) {
            url += `${language ? '&' : '?'}orderBy=${currentSort.column}`;
          }
          
          const response = await fetch(url);
          const experiences = await response.json();
          
          if (response.ok) {
            // Clear the table
            tbody.innerHTML = '';
            
            // Add experiences to the table
            experiences.forEach(experience => {
              const row = document.createElement('tr');
              row.dataset.id = experience.id;
              
              row.innerHTML = `
                <td>${experience.id}</td>
                <td>${experience.experience_id}</td>
                <td>${experience.title}</td>
                <td>${experience.course}</td>
                <td>${experience.course_type || ''}</td>
                <td>${experience.location}</td>
                <td>${experience.date}</td>
                <td>${experience.duration || ''}</td>
                <td>${experience.ora_inizio || ''}</td>
                <td>${experience.ora_fine || ''}</td>
                <td>${experience.language}</td>
                <td>${experience.max_participants}</td>
                <td>${experience.current_participants}</td>
                <td>${experience.desc || ''}</td>
                <td class="action-buttons">
                  <button class="edit" data-id="${experience.id}">Edit</button>
                  <button class="delete" data-id="${experience.id}">Delete</button>
                </td>
              `;
              
              tbody.appendChild(row);
            });
          } else {
            alert('Error loading experiences');
          }
        } catch (error) {
          console.error('Error loading experiences:', error);
          alert('Error loading experiences. See console for details.');
        }
      }
      
      // Function to filter by language
      function filterByLanguage() {
        loadExperiences();
      }
      
      // Function to sort the table
      function sortTable(column) {
        if (currentSort.column === column) {
          // Toggle direction
          currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
        } else {
          currentSort.column = column;
          currentSort.direction = 'asc';
        }
        
        // Update UI to show sort direction
        table.querySelectorAll('th[data-sort]').forEach(th => {
          th.textContent = th.textContent.replace(' ↑', '').replace(' ↓', '');
          if (th.dataset.sort === currentSort.column) {
            th.textContent += currentSort.direction === 'asc' ? ' ↑' : ' ↓';
          }
        });
        
        // Reload with new sort
        loadExperiences();
      }
    });
  </script>
</body>
</html>